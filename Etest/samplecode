1.
n, m = 5, 4
ans = 0
selected = []
day_map = {'MO': 0, 'TU': 1, 'WE': 2, 'TH': 3, 'FR': 4}
def conv(tz):
    return day_map[tz[:2]] * 60 * 24 + int(tz[3:5]) * 60 + int(tz[6:8])
def parse(tz):
    if len(tz) == 8:
        v = conv(tz)
        return [(v, v + 90), (v + 90, v + 180)]
    else:
        v1 = conv(tz[:8])
        v2 = conv(tz[9:])
        return [(v1, v1 + 90), (v2, v2 + 90)]
def conflict(A, B):  # A, B는 모두 시간 (요일 + 시간 + 분)
    A = parse(A)
    B = parse(B)
    for a in A:
        for b in B:
            if max(a[0], b[0]) < min(a[1], b[1]):
                return True
    return False
def dfs(idx, schedule):
    if idx == len(schedule):
        return 1
    ret = 0
    for j in schedule[idx]:  # j 시간에 들을 것
        flag = True
        for k in selected:  # k 시간에 이미 다른 과목 들음
            if conflict(j, k):  # 겹치면 실패
                flag = False
        if flag:  # 안 겹치면 재귀호출
            selected.append(j)
            ret += dfs(idx + 1, schedule)
            selected.pop()
    return ret
def solution(schedule):
    return dfs(0, schedule)
    
# print(solution([["MO 12:00 WE 14:30", "MO 12:00", "MO 15:00", "MO 18:00"], ["TU 09:00", "TU 10:00", "TU 15:00", "TU 18:00"], ["WE 09:00", "WE 12:00", "WE 15:00", "WE 18:00"], ["TH 09:30", "TH 11:30", "TH 15:00", "TH 18:00"], ["FR 15:00", "FR 15:00", "FR 15:00", "FR 15:00"]]))
2.
#include <string>
#include <vector>
#include <unordered_set>
#include <queue>
using namespace std;
typedef long long int ll;
unordered_set<ll> mem;
inline ll conv(vector<int> &stones){
    ll res = 0;
    for (int x: stones) res = res * 25 + x;
    return res;
}
string dfs(vector<int> stones, int k, string path) {
    mem.insert(conv(stones));
    // 종료 조건 (k개 남은 돌무더기 하나만 있는가?)
    int cnt_k = 0, cnt_zero = 0;
    for (int x: stones) {
        if (x == k) cnt_k++;
        if (x == 0) cnt_zero++;
    }
    if (cnt_zero == stones.size() - 1 && cnt_k == 1) return path;
    // 완전 탐색
    // 처음 찾은 방법이 사전 순으로 마지막임을 보장하기 위해 역순 탐색
    for (int i = stones.size() - 1; i >= 0; i--) {
        bool flag = true;
        stones[i] += 2;
        for (int &x: stones){
            x--;
            if (x < 0) flag = false;
        }
        if (flag && mem.find(conv(stones)) == mem.end()) {
            string res = dfs(stones, k, path + (char)(i + '0'));
            if (res != "-1") return res;
        }
        stones[i] -= 2;
        for (int &x: stones){
            x++;
        }
    }
    return "-1";
}
string solution(vector<int> stones, int k) {
    int sum = 0, n = stones.size();
    for (int x: stones) sum += x;
    if (n > 2 && (sum - k) % (n - 2) != 0) return "-1";
    if (sum < k) return "-1";
    return dfs(stones, k, "");
}
3-python.
def shift(grid):
    n = len(grid)
    res = []
    for idx, row in enumerate(grid):
        res.append([None for _ in range(n * 2 - 1)])
        for i in range(n - idx - 1, n + idx):
            res[idx][i] = row[i - (n - idx - 1)]
    return res
def solution(grid):
    def inRange(r, c):
        nonlocal grid
        n = len(grid)
        if r < 0 or r >= n: return False
        if c < n - r - 1 or c >= n + r: return False
        return True
    def traverse(r, c, port):
        nonlocal con, conv, grid
        res = 0
        while inRange(r, c):
            res += 1
            port = conv[grid[r][c]][port]
            r, c, port = con[r][c][port]
        return res
    # inside rule
    conv = dict()
    conv['R'] = [0 for _ in range(6)]
    conv['B'] = [0 for _ in range(6)]
    conv['R'][0], conv['R'][2], conv['R'][4] = 5, 1, 3
    conv['B'][0], conv['B'][2], conv['B'][4] = 3, 5, 1
    # connection
    n = len(grid)
    con = [[[(-1, -1, -1) for _ in range(6)] for _ in range(n * 2 - 1)] for _ in range(n)]
    grid = shift(grid)
    for r in range(n):
        for c in range(n - r - 1, n + r):
            if (r + c) % 2 == (n - 1) % 2:  # right triangle
                con[r][c][1] = (r, c + 1, 4)
                con[r][c][3] = (r + 1, c, 0)
                con[r][c][5] = (r, c - 1, 2)
            else:  # inverse triangle
                con[r][c][1] = (r - 1, c, 2)
                con[r][c][3] = (r, c + 1, 4)
                con[r][c][5] = (r, c - 1, 0)
    answer = 0
    for r in range(n):
        # left side
        answer = max(answer, traverse(r, n - r - 1, 4))
        # right side
        answer = max(answer, traverse(r, n + r - 1, 0))
    # bottom side
    for c in range(n * 2 - 1):
        answer = max(answer, traverse(n - 1, c, 2))
    return answer
3-cpp.
#include <string>
#include <vector>
using namespace std;
int n;
int conv[2][6];
vector<string> grid;
inline int coord(int r, int c) {
    c -= (n - r - 1);
    if (grid[r][c] == 'R') return 0;
    return 1;
}
inline bool inRange(int r, int c) {
    if (r < 0 || r >= n) return false;
    if (c < n - r - 1 || c >= n + r) return false;
    return true;
}
struct Z{
    int r, c, port;
};
inline Z con(int r, int c, int port) {
    if ((r + c) % 2 == (n - 1) % 2) {  // right triangle
        if (port == 1) return {r, c + 1, 4};
        if (port == 3) return {r + 1, c, 0};
        if (port == 5) return {r, c - 1, 2};
    }
    else {  // inverse triangle
        if (port == 1) return {r - 1, c, 2};
        if (port == 3) return {r, c + 1, 4};
        if (port == 5) return {r, c - 1, 0};
    }
}
int traverse(int r, int c, int port) {
    int ret = 0;
    while (inRange(r, c)){
        ret++;
        int type = 0;
        if (grid[r][c - (n - 1 - r)] == 'B') type = 1;
        port = conv[type][port];
        Z nxt = con(r, c, port);
        r = nxt.r;
        c = nxt.c;
        port = nxt.port;
    }
    return ret;
}
int solution(vector<string> _grid) {
    grid = _grid;
    const int R = 0;
    const int B = 1;
    conv[R][0] = 5, conv[R][2] = 1, conv[R][4] = 3;
    conv[B][0] = 3, conv[B][2] = 5, conv[B][4] = 1;
    n = grid.size();
    int ans = 0;
    for (int r=0;r<n;r++){
        ans = max(ans, traverse(r, n - r - 1, 4));
        ans = max(ans, traverse(r, n + r - 1, 0));
    }
    for (int c=0;c<n*2-1;c++){
        ans = max(ans, traverse(n - 1, c, 2));
    }
    return ans;
}
4.
#include <string>
#include <vector>
#include <iostream>
using namespace std;
char ch(char x, int cnt){
    string p = "RGB";
    int y = 0;
    if (x == 'R') y = 0;
    if (x == 'G') y = 1;
    if (x == 'B') y = 2;
    return p[(y + cnt) % 3];
}
int solution(int n, int k, string bulbs) {
    vector<int> cnt(n + 1, 0);
    int ans = 0;
    for (int i=0;i<n;i++){
        if (i > 0) cnt[i] += cnt[i-1];
        bulbs[i] = ch(bulbs[i], cnt[i]);
        if (bulbs[i] == 'R') continue;
        else{
            if (i >= n - k + 1) return -1;
            int click = 0;
            if (bulbs[i] == 'B') click = 1;
            else click = 2;
            cnt[i] += click;
            cnt[i + k] -= click;
            ans += click;
        }
    }
    return ans;
}
5.
#include<iostream>
#include<vector>
#include<string>
using namespace std;
int target, match[50];
int a[50][50], n;
int path[50], visit[50];
int dfs(int x, int idx) {
    if (visit[x]) return 0;
    path[idx] = x;
    visit[x] = 1;
    if (match[x] == -1 && idx % 2 == 0) {
        for (int i = 1; i <= idx; i += 2) {
            match[path[i]] = path[i + 1];
            match[path[i + 1]] = path[i];
        }
        return 1;
    }
    else if (idx % 2 == 0) {
        return dfs(match[x], idx + 1);
    }
    else {
        int flag = 0;
        for (int j = 1; j < n; j++) {
            if (j == target) continue;
            //if (visit[j][(idx+1)%2]) continue;
            if (a[x][j] == 0) continue;
            if (dfs(j, idx + 1) == 1) return 1;
        }
        return 0;
    }
}
vector<string> solution(vector<string> P)
{
    n = P.size();
    vector<string> answer;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) continue;
            string x = P[i] + P[j];
            int flag = 0;
            for (int k = 0; k < x.length(); k++) {
                if (x[k] != x[x.length() - 1 - k]) flag = 1;
            }
            if (flag == 0) a[i][j] = a[j][i] = 1;
        }
    }
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < n; j++) match[j] = -1;
        if (a[0][i] == 0) continue;
        target = i;
        match[target] = 0;
        match[0] = target;
        int cnt = 0;
        for (int j = 1; j < n; j++) {
            if (match[j] != -1) continue;
            for (int k = 0; k < n; k++) visit[k] = 0;
            cnt += dfs(j, 1);
        }
        if (cnt * 2 == n - 2){
            answer.push_back(P[i]);
        }
    }
    return answer;
}
